{"name": "Successful fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('xpath', '//input[@type=\"file\"]')).type: C:\\MyProjects\\jenkins_test\\image\\test.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\MyProjects\\jenkins_test\\image\\test.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x562ec58fc013 <unknown>\n#1 0x562ec565ea08 <unknown>\n#2 0x562ec568ddd6 <unknown>\n#3 0x562ec56b2932 <unknown>\n#4 0x562ec56896d3 <unknown>\n#5 0x562ec56b2a3e <unknown>\n#6 0x562ec56c5b94 <unknown>\n#7 0x562ec56b2823 <unknown>\n#8 0x562ec568808a <unknown>\n#9 0x562ec56891e5 <unknown>\n#10 0x562ec5929e5d <unknown>\n#11 0x562ec5943061 <unknown>\n#12 0x562ec592bbb5 <unknown>\n#13 0x562ec5943e08 <unknown>\n#14 0x562ec591f2f0 <unknown>\n#15 0x562ec595f988 <unknown>\n#16 0x562ec595fb08 <unknown>\n#17 0x562ec59795dd <unknown>\n#18 0x7f53033d0609 <unknown>", "trace": "self = <selene.core.wait.Wait object at 0x000001E7CA569060>, fn = <selene.core.wait.Command object at 0x000001E7CA568490>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n.venv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selene\\core\\wait.py:56: in __call__\n    return self._fn(entity)\n.venv\\lib\\site-packages\\selene\\core\\entity.py:388: in fn\n    webelement.send_keys(str(text))\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:600: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:773: in _execute\n    return self._parent.execute(command, params)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E7CA4F7760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\MyP...\\\\n#16 0x562ec595fb08 \\\\u003Cunknown>\\\\n#17 0x562ec59795dd \\\\u003Cunknown>\\\\n#18 0x7f53033d0609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\MyProjects\\jenkins_test\\image\\test.png\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x562ec58fc013 <unknown>\nE       #1 0x562ec565ea08 <unknown>\nE       #2 0x562ec568ddd6 <unknown>\nE       #3 0x562ec56b2932 <unknown>\nE       #4 0x562ec56896d3 <unknown>\nE       #5 0x562ec56b2a3e <unknown>\nE       #6 0x562ec56c5b94 <unknown>\nE       #7 0x562ec56b2823 <unknown>\nE       #8 0x562ec568808a <unknown>\nE       #9 0x562ec56891e5 <unknown>\nE       #10 0x562ec5929e5d <unknown>\nE       #11 0x562ec5943061 <unknown>\nE       #12 0x562ec592bbb5 <unknown>\nE       #13 0x562ec5943e08 <unknown>\nE       #14 0x562ec591f2f0 <unknown>\nE       #15 0x562ec595f988 <unknown>\nE       #16 0x562ec595fb08 <unknown>\nE       #17 0x562ec59795dd <unknown>\nE       #18 0x7f53033d0609 <unknown>\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selene.core.entity.Browser object at 0x000001E7CA4F7DF0>\n\n    @allure.title(\"Successful fill form\")\n    def test_successful(setup_browser):\n        browser = setup_browser\n        first_name = \"Denis\"\n        last_name = \"Mironov\"\n    \n        with allure.step(\"Open registrations form\"):\n            browser.open(\"https://demoqa.com/automation-practice-form\")\n            browser.element(\".practice-form-wrapper\").should(have.text(\"Student Registration Form\"))\n            browser.driver.execute_script(\"$('footer').remove()\")\n            browser.driver.execute_script(\"$('#fixedban').remove()\")\n    \n        with allure.step(\"Fill form\"):\n            browser.element(\"#firstName\").set_value(first_name)\n            browser.element(\"#lastName\").set_value(last_name)\n            browser.element(\"#userEmail\").set_value(\"asd@egorov.com\")\n            browser.element(\"#genterWrapper\").element(by.text(\"Other\")).click()\n            browser.element(\"#userNumber\").set_value(\"1231231230\")\n            browser.element(\"#dateOfBirthInput\").click()\n            browser.element('.react-datepicker__month-select').click().element('option[value=\"11\"]').click()\n            browser.element('.react-datepicker__year-select').type('1989')\n            browser.element('.react-datepicker__day.react-datepicker__day--025').click()\n            browser.element(\"#subjectsInput\").send_keys(\"Maths\")\n            browser.element(\"#subjectsInput\").press_enter()\n            browser.element(\"#hobbiesWrapper\").element(by.text(\"Sports\")).click()\n>           browser.element('//input[@type=\"file\"]').type(os.path.abspath(\"image\\\\test.png\"))\n\ntests\\test_registration_form.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selene\\core\\entity.py:392: in type\n    self.wait.for_(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Wait object at 0x000001E7CA569060>, fn = <selene.core.wait.Command object at 0x000001E7CA568490>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 4s, while waiting for:\nE                       browser.element(('xpath', '//input[@type=\"file\"]')).type: C:\\MyProjects\\jenkins_test\\image\\test.png\nE                       \nE                       Reason: InvalidArgumentException: Message: invalid argument: File not found : C:\\MyProjects\\jenkins_test\\image\\test.png\nE                         (Session info: chrome=100.0.4896.60)\nE                       Stacktrace:\nE                       #0 0x562ec58fc013 <unknown>\nE                       #1 0x562ec565ea08 <unknown>\nE                       #2 0x562ec568ddd6 <unknown>\nE                       #3 0x562ec56b2932 <unknown>\nE                       #4 0x562ec56896d3 <unknown>\nE                       #5 0x562ec56b2a3e <unknown>\nE                       #6 0x562ec56c5b94 <unknown>\nE                       #7 0x562ec56b2823 <unknown>\nE                       #8 0x562ec568808a <unknown>\nE                       #9 0x562ec56891e5 <unknown>\nE                       #10 0x562ec5929e5d <unknown>\nE                       #11 0x562ec5943061 <unknown>\nE                       #12 0x562ec592bbb5 <unknown>\nE                       #13 0x562ec5943e08 <unknown>\nE                       #14 0x562ec591f2f0 <unknown>\nE                       #15 0x562ec595f988 <unknown>\nE                       #16 0x562ec595fb08 <unknown>\nE                       #17 0x562ec59795dd <unknown>\nE                       #18 0x7f53033d0609 <unknown>\n\n.venv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException"}, "steps": [{"name": "Open registrations form", "status": "passed", "start": 1700994890833, "stop": 1700994893521}, {"name": "Fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('xpath', '//input[@type=\"file\"]')).type: C:\\MyProjects\\jenkins_test\\image\\test.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\MyProjects\\jenkins_test\\image\\test.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x562ec58fc013 <unknown>\n#1 0x562ec565ea08 <unknown>\n#2 0x562ec568ddd6 <unknown>\n#3 0x562ec56b2932 <unknown>\n#4 0x562ec56896d3 <unknown>\n#5 0x562ec56b2a3e <unknown>\n#6 0x562ec56c5b94 <unknown>\n#7 0x562ec56b2823 <unknown>\n#8 0x562ec568808a <unknown>\n#9 0x562ec56891e5 <unknown>\n#10 0x562ec5929e5d <unknown>\n#11 0x562ec5943061 <unknown>\n#12 0x562ec592bbb5 <unknown>\n#13 0x562ec5943e08 <unknown>\n#14 0x562ec591f2f0 <unknown>\n#15 0x562ec595f988 <unknown>\n#16 0x562ec595fb08 <unknown>\n#17 0x562ec59795dd <unknown>\n#18 0x7f53033d0609 <unknown>\n\n\n", "trace": "  File \"C:\\MyProjects\\jenkins_test\\tests\\test_registration_form.py\", line 32, in test_successful\n    browser.element('//input[@type=\"file\"]').type(os.path.abspath(\"image\\\\test.png\"))\n  File \"C:\\MyProjects\\jenkins_test\\.venv\\lib\\site-packages\\selene\\core\\entity.py\", line 392, in type\n    self.wait.for_(\n  File \"C:\\MyProjects\\jenkins_test\\.venv\\lib\\site-packages\\selene\\core\\wait.py\", line 125, in for_\n    raise self._hook_failure(failure)\n"}, "start": 1700994893521, "stop": 1700994900610}], "start": 1700994890833, "stop": 1700994900613, "uuid": "793965e4-51cd-4e1d-b12a-145611991988", "historyId": "4e088263a2c2ee633d27c6e4f6afa3ed", "testCaseId": "a3da2b33f3ca61428ffa8484c0eb7dcc", "fullName": "tests.test_registration_form#test_successful", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "DESKTOP-3GMC98Q"}, {"name": "thread", "value": "24624-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration_form"}]}